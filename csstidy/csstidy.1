.\"     Title: csstidy
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.72.0 <http://docbook.sf.net/>
.\"      Date: 03/18/2007
.\"    Manual: 
.\"    Source: 
.\"
.TH "CSSTIDY" "1" "03/18/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
csstidy \- CSS parser and optimiser
.SH "SYNOPSIS"
\fIcsstidy\fR input\-file [options] [output\-file]
.sp
.SH "DESCRIPTION"
The csstidy(1) command parses and optimises a css file given as \fIinput\-file\fR. If no \fIoutput\-file\fR is specified, the results are displayed to standard output. Various options allow for fine\-grained control over the level of readability, file size and other items.
.sp
If you use the filename "\-", csstidy reads from stdin. In most case you will probably find that csstidy defaults are reasonable and applicable to most situations.
.sp
Note that csstidy is not designed to be a css validator. Although you should only enter valid (or rather well\-formed) code, csstidy will also parse and fix incorrect code.
.sp
.SH "EXAMPLES"
.PP
To optimise a CSS file and send the output to screen use:
.RS 4
csstidy mycssfile.css
.RE
.PP
If you want to save the output to a file, use:
.RS 4
csstidy mycssfile.css myoutputfile.css
.RE
.PP
If you want to use an option[s] and output to a file, use:
.RS 4
csstidy mycssfile.css \-\-lowercase_s=true myoutputfile.css
.RE
.SH "OPTIONS"
.PP
\-\-allow_html_in_templates=[false|true]
.RS 4
default = false
.RE
.PP
\-\-case_properties=[false|true]
.RS 4
Case for properties. Default = false.
.RE
.PP
\-\-compress_colors=[true|false]
.RS 4
If set to true, csstidy will optimize color value by trying to save bytes (i.e. black becomes #000). Default = true.
.RE
.PP
\-\-compress_font\-weight=[true|false]
.RS 4
If set to true, csstidy will optimize font value by trying to save bytes (i.e. normal becomes 400). Default = true.
.RE
.PP
\-\-discard_invalid_properties=[false|true]
.RS 4
If set to true, csstidy will remove invalid properties. In a sense this is like validation, except you get no warnings unless you study the output. As an example, if you misspelled the property "width" as "with", that property will simply be removed. Default = false.
.RE
.PP
\-\-lowercase_s=[false|true]
.RS 4
If set to true, all uppercase selectors (i.e. A, P, SPAN) will be rewritten in lowercase. Default = false.
.RE
.PP
\-\-preserve_css=[false|true]
.RS 4
All comments and most browser specific hacks will be removed if this is set to false. Setting this to true will preserve browser specific hacks. Default = false.
.RE
.PP
\-\-remove_bslash=[true|false]
.RS 4
Remove unnecessary backslashes. This may or may not be desirable depending upon whether you have used backslashes to accomodate browsers that do not comply with w3c standards. Default = true.
.RE
.PP
\-\-remove_last_;=[false|true]
.RS 4
Default = false.
.RE
.PP
\-\-silent=[false|true]
.RS 4
When set to true, csstidy will not output information about the optimizations preformed. Default = false.
.RE
.PP
\-\-sort_properties=[false|true]
.RS 4
Sorts properties (i.e. background, color, width) of selectors. Default = false.
.RE
.PP
\-\-sort_selectors=[false|true]
.RS 4
Sorts selectors. Use this with caution, as it will totally rearrange any sense of layout in your file that you may have written into it, and css is sensitive to order. Sorts in order of ID's, classes and then selectors. Default = false.
.RE
.PP
\-\-timestamp=[false|true]
.RS 4
If set to true, adds a comment enclosed timestamp to the top of the output. Default = false.
.RE
.PP
\-\-merge_selectors=[2|1|0]
.RS 4
If selectors (including ID's and classes) have identical properties, then csstidy will merge them. A setting of 2 represents a high degree of merging. 0 represents no merging. Default = 2.
.RE
.PP
\-\-optimise_shorthands=[1|2|0]
.RS 4
If set to 2, csstidy will invoke all optimisations. 0 represents no optimisations, and 1 a safe level of optimatisations. Default = 1.
.RE
.PP
\-\-template=[default|filename|low|high|highest]
.RS 4
Affects how much whitespace is removed and ultimately the readability of the output.
.RE
.SH "CSS HACKS"
The following is a list of all CSS hacks that will not be modified by default by csstidy. If you enable "preserve CSS", more hacks will be saved. In general you should do without CSS hacks anyway, but if you need them and want to use csstidy you should use one of the following hacks:
.sp
.sp
.RS 4
.nf
p\eroperty:value; (only if you disable the removal of unnecessary backslashes)
div#test
head:first\-child+body div
body>div
html[xmlns] div
@import "null?\e"\e\e{"; @import "styles.css"; (and all other @import rules)
@media all{/\e* rules \e*/}
* html div
i\e{content:"\e"/*"\e} div\e{property:value\e}
html*#test
_property:value
.fi
.RE
.SH "AUTHOR"
Written by Florian Schmitz <floele@gmail.com>
.sp
.SH "RESOURCES"
Main web site: \fIhttp://csstidy.sourceforge.net/\fR
.sp
This manual page was written by Kevin Coyner <kcoyner@debian.org> for the Debian project but may be used by others.
.sp
